
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightLARROWrightnotnonassocLESSEQLESSEQUALleftPLUSMINUSleftSTARDIVrightisvoidrightNOXleftARROBAleftDOTARROBA CCUR COLON COMMA CPAR DIV DOT EQUAL ID LARROW LESS LESSEQ MINUS NOX NUMBER OCUR OPAR PLUS RARROW SEMI STAR STRING TYPE case class else esac false fi if in inherits isvoid let loop new not of pool then true whileempty :program : class_listclass_list : def_class SEMI class_list\n                      | def_class SEMIdef_class : class TYPE OCUR feature_list CCUR\n                     | class TYPE inherits TYPE OCUR feature_list CCURfeature_list : def_attr SEMI feature_list\n                        | def_func SEMI feature_list\n                        | emptydef_attr : ID COLON TYPE\n                    | ID COLON TYPE LARROW exprdef_func : ID OPAR param_list_call CPAR COLON TYPE OCUR expr CCURparam_list_call : param_list\n                           | param_list_emptyparam_list : param\n                      | param COMMA param_listparam_list_empty : emptyparam : ID COLON TYPEexpr_list : expr SEMI expr_list\n                     | expr SEMIdeclar_list : declar\n                       | declar COMMA declar_listdeclar : ID COLON TYPE\n                  | ID COLON TYPE LARROW exprassign_list : case_assign\n                       | case_assign assign_listcase_assign : ID COLON TYPE RARROW expr SEMIexpr : let declar_list in exprexpr : while expr loop expr poolexpr : if expr then expr else expr fiexpr : case expr of assign_list esacexpr : OCUR expr_list CCURexpr : ID LARROW exprexpr : not expr\n                | expr expr : expr EQUAL expr\n                    | expr LESS expr\n                    | expr LESSEQ exprexpr : expr PLUS expr\n                | expr MINUS expr\n                | expr STAR expr\n                | expr DIV expr expr : factorexpr : NOX exprexpr : isvoid exprfactor : atomfactor : OPAR expr CPARfactor : factor DOT ID OPAR arg_list_call CPAR\n                  | ID OPAR arg_list_call CPAR\n                  | factor ARROBA TYPE DOT ID OPAR arg_list_call CPARarg_list_call : arg_list\n                         | arg_list_emptyatom : NUMBERatom : true\n                | falseatom : IDatom : new TYPEatom : STRINGarg_list : expr\n                    | expr COMMA arg_listarg_list_empty : empty'
    
_lr_action_items = {'class':([0,5,],[4,4,]),'$end':([1,2,5,7,],[0,-2,-4,-3,]),'SEMI':([3,11,12,16,24,36,37,38,45,48,50,51,52,54,74,75,78,79,81,83,89,90,91,92,93,94,95,102,106,108,110,124,126,131,135,137,140,141,],[5,17,18,-5,-10,-6,-56,-11,-43,-46,-53,-54,-55,-58,103,-34,-35,-35,-57,-33,-35,-35,-35,-35,-35,-35,-35,-32,-47,-49,-28,-29,-31,-12,-48,-30,142,-50,]),'TYPE':([4,9,19,33,53,56,77,98,128,],[6,15,24,55,81,82,105,112,134,]),'OCUR':([6,15,32,40,41,42,43,44,46,47,49,58,59,60,61,62,63,64,65,66,82,96,99,100,103,107,109,119,123,125,136,138,],[8,21,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,107,43,43,43,43,43,43,43,43,43,43,43,]),'inherits':([6,],[9,]),'ID':([8,17,18,20,21,32,35,39,40,41,42,43,44,46,47,49,58,59,60,61,62,63,64,65,66,76,96,97,99,100,101,103,107,109,116,119,120,123,125,136,138,142,],[14,14,14,25,14,37,25,69,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,104,37,69,37,37,117,37,37,37,117,37,130,37,37,37,37,-27,]),'CCUR':([8,10,13,17,18,21,22,23,31,37,45,48,50,51,52,54,73,75,78,79,81,83,89,90,91,92,93,94,95,102,103,106,108,110,118,121,124,126,135,137,141,],[-1,16,-9,-1,-1,-1,-7,-8,36,-56,-43,-46,-53,-54,-55,-58,102,-34,-35,-35,-57,-33,-35,-35,-35,-35,-35,-35,-35,-32,-20,-47,-49,-28,-19,131,-29,-31,-48,-30,-50,]),'COLON':([14,25,34,69,117,],[19,33,56,98,128,]),'OPAR':([14,32,37,40,41,42,43,44,46,47,49,58,59,60,61,62,63,64,65,66,96,99,100,103,104,107,109,119,123,125,130,136,138,],[20,49,59,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,119,49,49,49,49,49,136,49,49,]),'CPAR':([20,26,27,28,29,30,37,45,48,50,51,52,54,55,57,59,75,78,79,80,81,83,84,85,86,87,88,89,90,91,92,93,94,95,102,106,108,110,119,122,124,126,129,135,136,137,139,141,],[-1,34,-13,-14,-15,-17,-56,-43,-46,-53,-54,-55,-58,-18,-16,-1,-34,-35,-35,106,-57,-33,108,-51,-52,-35,-61,-35,-35,-35,-35,-35,-35,-35,-32,-47,-49,-28,-1,-60,-29,-31,135,-48,-1,-30,141,-50,]),'LARROW':([24,37,112,],[32,58,123,]),'COMMA':([29,37,45,48,50,51,52,54,55,68,75,78,79,81,83,87,89,90,91,92,93,94,95,102,106,108,110,112,124,126,132,135,137,141,],[35,-56,-43,-46,-53,-54,-55,-58,-18,97,-34,-35,-35,-57,-33,109,-35,-35,-35,-35,-35,-35,-35,-32,-47,-49,-28,-23,-29,-31,-24,-48,-30,-50,]),'let':([32,40,41,42,43,44,46,47,49,58,59,60,61,62,63,64,65,66,96,99,100,103,107,109,119,123,125,136,138,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'while':([32,40,41,42,43,44,46,47,49,58,59,60,61,62,63,64,65,66,96,99,100,103,107,109,119,123,125,136,138,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'if':([32,40,41,42,43,44,46,47,49,58,59,60,61,62,63,64,65,66,96,99,100,103,107,109,119,123,125,136,138,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'case':([32,40,41,42,43,44,46,47,49,58,59,60,61,62,63,64,65,66,96,99,100,103,107,109,119,123,125,136,138,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'not':([32,40,41,42,43,44,46,47,49,58,59,60,61,62,63,64,65,66,96,99,100,103,107,109,119,123,125,136,138,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'NOX':([32,40,41,42,43,44,46,47,49,58,59,60,61,62,63,64,65,66,96,99,100,103,107,109,119,123,125,136,138,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'isvoid':([32,40,41,42,43,44,46,47,49,58,59,60,61,62,63,64,65,66,96,99,100,103,107,109,119,123,125,136,138,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'NUMBER':([32,40,41,42,43,44,46,47,49,58,59,60,61,62,63,64,65,66,96,99,100,103,107,109,119,123,125,136,138,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'true':([32,40,41,42,43,44,46,47,49,58,59,60,61,62,63,64,65,66,96,99,100,103,107,109,119,123,125,136,138,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'false':([32,40,41,42,43,44,46,47,49,58,59,60,61,62,63,64,65,66,96,99,100,103,107,109,119,123,125,136,138,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'new':([32,40,41,42,43,44,46,47,49,58,59,60,61,62,63,64,65,66,96,99,100,103,107,109,119,123,125,136,138,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'STRING':([32,40,41,42,43,44,46,47,49,58,59,60,61,62,63,64,65,66,96,99,100,103,107,109,119,123,125,136,138,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'DOT':([37,45,48,50,51,52,54,81,105,106,108,135,141,],[-56,76,-46,-53,-54,-55,-58,-57,120,-47,-49,-48,-50,]),'ARROBA':([37,45,48,50,51,52,54,81,106,108,135,141,],[-56,77,-46,-53,-54,-55,-58,-57,-47,-49,-48,-50,]),'EQUAL':([37,38,45,48,50,51,52,54,70,71,72,74,75,78,79,80,81,83,87,89,90,91,92,93,94,95,102,106,108,110,113,114,121,124,126,132,133,135,137,140,141,],[-56,60,-43,-46,-53,-54,-55,-58,60,60,60,60,60,60,60,60,-57,60,60,60,60,60,60,60,60,60,-32,-47,-49,60,60,60,60,-29,-31,60,60,-48,-30,60,-50,]),'LESS':([37,38,45,48,50,51,52,54,70,71,72,74,75,78,79,80,81,83,87,89,90,91,92,93,94,95,102,106,108,110,113,114,121,124,126,132,133,135,137,140,141,],[-56,61,-43,-46,-53,-54,-55,-58,61,61,61,61,61,61,61,61,-57,61,61,61,61,61,61,61,61,61,-32,-47,-49,61,61,61,61,-29,-31,61,61,-48,-30,61,-50,]),'LESSEQ':([37,38,45,48,50,51,52,54,70,71,72,74,75,78,79,80,81,83,87,89,90,91,92,93,94,95,102,106,108,110,113,114,121,124,126,132,133,135,137,140,141,],[-56,62,-43,-46,-53,-54,-55,-58,62,62,62,62,62,62,62,62,-57,62,62,62,62,62,62,62,62,62,-32,-47,-49,62,62,62,62,-29,-31,62,62,-48,-30,62,-50,]),'PLUS':([37,38,45,48,50,51,52,54,70,71,72,74,75,78,79,80,81,83,87,89,90,91,92,93,94,95,102,106,108,110,113,114,121,124,126,132,133,135,137,140,141,],[-56,63,-43,-46,-53,-54,-55,-58,63,63,63,63,63,63,63,63,-57,63,63,63,63,63,63,63,63,63,-32,-47,-49,63,63,63,63,-29,-31,63,63,-48,-30,63,-50,]),'MINUS':([37,38,45,48,50,51,52,54,70,71,72,74,75,78,79,80,81,83,87,89,90,91,92,93,94,95,102,106,108,110,113,114,121,124,126,132,133,135,137,140,141,],[-56,64,-43,-46,-53,-54,-55,-58,64,64,64,64,64,64,64,64,-57,64,64,64,64,64,64,64,64,64,-32,-47,-49,64,64,64,64,-29,-31,64,64,-48,-30,64,-50,]),'STAR':([37,38,45,48,50,51,52,54,70,71,72,74,75,78,79,80,81,83,87,89,90,91,92,93,94,95,102,106,108,110,113,114,121,124,126,132,133,135,137,140,141,],[-56,65,-43,-46,-53,-54,-55,-58,65,65,65,65,65,65,65,65,-57,65,65,65,65,65,65,65,65,65,-32,-47,-49,65,65,65,65,-29,-31,65,65,-48,-30,65,-50,]),'DIV':([37,38,45,48,50,51,52,54,70,71,72,74,75,78,79,80,81,83,87,89,90,91,92,93,94,95,102,106,108,110,113,114,121,124,126,132,133,135,137,140,141,],[-56,66,-43,-46,-53,-54,-55,-58,66,66,66,66,66,66,66,66,-57,66,66,66,66,66,66,66,66,66,-32,-47,-49,66,66,66,66,-29,-31,66,66,-48,-30,66,-50,]),'loop':([37,45,48,50,51,52,54,70,75,78,79,81,83,89,90,91,92,93,94,95,102,106,108,110,124,126,135,137,141,],[-56,-43,-46,-53,-54,-55,-58,99,-34,-35,-35,-57,-33,-35,-35,-35,-35,-35,-35,-35,-32,-47,-49,-28,-29,-31,-48,-30,-50,]),'then':([37,45,48,50,51,52,54,71,75,78,79,81,83,89,90,91,92,93,94,95,102,106,108,110,124,126,135,137,141,],[-56,-43,-46,-53,-54,-55,-58,100,-34,-35,-35,-57,-33,-35,-35,-35,-35,-35,-35,-35,-32,-47,-49,-28,-29,-31,-48,-30,-50,]),'of':([37,45,48,50,51,52,54,72,75,78,79,81,83,89,90,91,92,93,94,95,102,106,108,110,124,126,135,137,141,],[-56,-43,-46,-53,-54,-55,-58,101,-34,-35,-35,-57,-33,-35,-35,-35,-35,-35,-35,-35,-32,-47,-49,-28,-29,-31,-48,-30,-50,]),'pool':([37,45,48,50,51,52,54,75,78,79,81,83,89,90,91,92,93,94,95,102,106,108,110,113,124,126,135,137,141,],[-56,-43,-46,-53,-54,-55,-58,-34,-35,-35,-57,-33,-35,-35,-35,-35,-35,-35,-35,-32,-47,-49,-28,124,-29,-31,-48,-30,-50,]),'else':([37,45,48,50,51,52,54,75,78,79,81,83,89,90,91,92,93,94,95,102,106,108,110,114,124,126,135,137,141,],[-56,-43,-46,-53,-54,-55,-58,-34,-35,-35,-57,-33,-35,-35,-35,-35,-35,-35,-35,-32,-47,-49,-28,125,-29,-31,-48,-30,-50,]),'in':([37,45,48,50,51,52,54,67,68,75,78,79,81,83,89,90,91,92,93,94,95,102,106,108,110,111,112,124,126,132,135,137,141,],[-56,-43,-46,-53,-54,-55,-58,96,-21,-34,-35,-35,-57,-33,-35,-35,-35,-35,-35,-35,-35,-32,-47,-49,-28,-22,-23,-29,-31,-24,-48,-30,-50,]),'fi':([37,45,48,50,51,52,54,75,78,79,81,83,89,90,91,92,93,94,95,102,106,108,110,124,126,133,135,137,141,],[-56,-43,-46,-53,-54,-55,-58,-34,-35,-35,-57,-33,-35,-35,-35,-35,-35,-35,-35,-32,-47,-49,-28,-29,-31,137,-48,-30,-50,]),'esac':([115,116,127,142,],[126,-25,-26,-27,]),'RARROW':([134,],[138,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'class_list':([0,5,],[2,7,]),'def_class':([0,5,],[3,3,]),'feature_list':([8,17,18,21,],[10,22,23,31,]),'def_attr':([8,17,18,21,],[11,11,11,11,]),'def_func':([8,17,18,21,],[12,12,12,12,]),'empty':([8,17,18,20,21,59,119,136,],[13,13,13,30,13,88,88,88,]),'param_list_call':([20,],[26,]),'param_list':([20,35,],[27,57,]),'param_list_empty':([20,],[28,]),'param':([20,35,],[29,29,]),'expr':([32,40,41,42,43,44,46,47,49,58,59,60,61,62,63,64,65,66,96,99,100,103,107,109,119,123,125,136,138,],[38,70,71,72,74,75,78,79,80,83,87,89,90,91,92,93,94,95,110,113,114,74,121,87,87,132,133,87,140,]),'factor':([32,40,41,42,43,44,46,47,49,58,59,60,61,62,63,64,65,66,96,99,100,103,107,109,119,123,125,136,138,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'atom':([32,40,41,42,43,44,46,47,49,58,59,60,61,62,63,64,65,66,96,99,100,103,107,109,119,123,125,136,138,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'declar_list':([39,97,],[67,111,]),'declar':([39,97,],[68,68,]),'expr_list':([43,103,],[73,118,]),'arg_list_call':([59,119,136,],[84,129,139,]),'arg_list':([59,109,119,136,],[85,122,85,85,]),'arg_list_empty':([59,119,136,],[86,86,86,]),'assign_list':([101,116,],[115,127,]),'case_assign':([101,116,],[116,116,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',43),
  ('program -> class_list','program',1,'p_program','parser.py',47),
  ('class_list -> def_class SEMI class_list','class_list',3,'p_class_list','parser.py',51),
  ('class_list -> def_class SEMI','class_list',2,'p_class_list','parser.py',52),
  ('def_class -> class TYPE OCUR feature_list CCUR','def_class',5,'p_def_class','parser.py',56),
  ('def_class -> class TYPE inherits TYPE OCUR feature_list CCUR','def_class',7,'p_def_class','parser.py',57),
  ('feature_list -> def_attr SEMI feature_list','feature_list',3,'p_feature_list','parser.py',69),
  ('feature_list -> def_func SEMI feature_list','feature_list',3,'p_feature_list','parser.py',70),
  ('feature_list -> empty','feature_list',1,'p_feature_list','parser.py',71),
  ('def_attr -> ID COLON TYPE','def_attr',3,'p_def_attr','parser.py',76),
  ('def_attr -> ID COLON TYPE LARROW expr','def_attr',5,'p_def_attr','parser.py',77),
  ('def_func -> ID OPAR param_list_call CPAR COLON TYPE OCUR expr CCUR','def_func',9,'p_def_func','parser.py',86),
  ('param_list_call -> param_list','param_list_call',1,'p_param_list_call','parser.py',93),
  ('param_list_call -> param_list_empty','param_list_call',1,'p_param_list_call','parser.py',94),
  ('param_list -> param','param_list',1,'p_param_list','parser.py',98),
  ('param_list -> param COMMA param_list','param_list',3,'p_param_list','parser.py',99),
  ('param_list_empty -> empty','param_list_empty',1,'p_param_list_empty','parser.py',106),
  ('param -> ID COLON TYPE','param',3,'p_param','parser.py',111),
  ('expr_list -> expr SEMI expr_list','expr_list',3,'p_expr_list','parser.py',117),
  ('expr_list -> expr SEMI','expr_list',2,'p_expr_list','parser.py',118),
  ('declar_list -> declar','declar_list',1,'p_declar_list','parser.py',123),
  ('declar_list -> declar COMMA declar_list','declar_list',3,'p_declar_list','parser.py',124),
  ('declar -> ID COLON TYPE','declar',3,'p_declar','parser.py',128),
  ('declar -> ID COLON TYPE LARROW expr','declar',5,'p_declar','parser.py',129),
  ('assign_list -> case_assign','assign_list',1,'p_assign_list','parser.py',138),
  ('assign_list -> case_assign assign_list','assign_list',2,'p_assign_list','parser.py',139),
  ('case_assign -> ID COLON TYPE RARROW expr SEMI','case_assign',6,'p_case_assign','parser.py',144),
  ('expr -> let declar_list in expr','expr',4,'p_expr_let','parser.py',151),
  ('expr -> while expr loop expr pool','expr',5,'p_expr_while','parser.py',158),
  ('expr -> if expr then expr else expr fi','expr',7,'p_expr_if','parser.py',165),
  ('expr -> case expr of assign_list esac','expr',5,'p_expr_case','parser.py',172),
  ('expr -> OCUR expr_list CCUR','expr',3,'p_expr_group','parser.py',179),
  ('expr -> ID LARROW expr','expr',3,'p_expr_assign','parser.py',186),
  ('expr -> not expr','expr',2,'p_expr_boolean','parser.py',193),
  ('expr -> expr','expr',1,'p_expr_boolean','parser.py',194),
  ('expr -> expr EQUAL expr','expr',3,'p_expr_comparison','parser.py',205),
  ('expr -> expr LESS expr','expr',3,'p_expr_comparison','parser.py',206),
  ('expr -> expr LESSEQ expr','expr',3,'p_expr_comparison','parser.py',207),
  ('expr -> expr PLUS expr','expr',3,'p_expr_arith','parser.py',217),
  ('expr -> expr MINUS expr','expr',3,'p_expr_arith','parser.py',218),
  ('expr -> expr STAR expr','expr',3,'p_expr_arith','parser.py',219),
  ('expr -> expr DIV expr','expr',3,'p_expr_arith','parser.py',220),
  ('expr -> factor','expr',1,'p_expr_factor','parser.py',242),
  ('expr -> NOX expr','expr',2,'p_expr_negate','parser.py',246),
  ('expr -> isvoid expr','expr',2,'p_expr_isvoid','parser.py',253),
  ('factor -> atom','factor',1,'p_factor_atom','parser.py',260),
  ('factor -> OPAR expr CPAR','factor',3,'p_factor_expr','parser.py',264),
  ('factor -> factor DOT ID OPAR arg_list_call CPAR','factor',6,'p_factor_call','parser.py',268),
  ('factor -> ID OPAR arg_list_call CPAR','factor',4,'p_factor_call','parser.py',269),
  ('factor -> factor ARROBA TYPE DOT ID OPAR arg_list_call CPAR','factor',8,'p_factor_call','parser.py',270),
  ('arg_list_call -> arg_list','arg_list_call',1,'p_arg_list_call','parser.py',279),
  ('arg_list_call -> arg_list_empty','arg_list_call',1,'p_arg_list_call','parser.py',280),
  ('atom -> NUMBER','atom',1,'p_atom_num','parser.py',284),
  ('atom -> true','atom',1,'p_atom_boolean','parser.py',291),
  ('atom -> false','atom',1,'p_atom_boolean','parser.py',292),
  ('atom -> ID','atom',1,'p_atom_id','parser.py',299),
  ('atom -> new TYPE','atom',2,'p_atom_instantiate','parser.py',306),
  ('atom -> STRING','atom',1,'p_atom_string','parser.py',313),
  ('arg_list -> expr','arg_list',1,'p_arg_list','parser.py',320),
  ('arg_list -> expr COMMA arg_list','arg_list',3,'p_arg_list','parser.py',321),
  ('arg_list_empty -> empty','arg_list_empty',1,'p_arg_list_empty','parser.py',328),
]
